apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

import com.android.build.OutputFile

react {
  debuggableVariants = ["productionDebug", "stagingDebug", "qaDebug"]
}

android {
  ndkVersion rootProject.ext.ndkVersion

  compileSdkVersion rootProject.ext.compileSdkVersion

  namespace "com.awesome.shop"
  defaultConfig {
    applicationId "com.awesome.shop"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 9
    versionName "5.8.0"
    multiDexEnabled true
  }

  flavorDimensions = ["env"]

  productFlavors {
    production {}
    staging {
      dimension "env"
      applicationIdSuffix ".testing"
    }
    qa {
      dimension "env"
      applicationIdSuffix ".testing"
    }
  }

  sourceSets {
    staging {
      res.srcDirs = ["src/staging/res"]
    }
    qa {
      res.srcDirs = ["src/qa/res"]
    }
  }

   signingConfigs {
    release {
      storeFile file('your_key_name.keystore')
      storePassword '123456'
      keyAlias 'your_key_alias'
      keyPassword '123456'
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.release

      minifyEnabled false
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }

  splits {
    abi {
      reset()
      enable false
      universalApk false
      include (*project.getProperties().get("reactNativeArchitectures").split(","))
    }
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // https://developer.android.com/studio/build/configure-apk-splits.html
      // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
      }
    }
  }
}

dependencies {
  implementation "com.facebook.react:react-android"
  implementation "androidx.multidex:multidex:2.0.1"
  implementation platform("com.google.firebase:firebase-bom:${firebaseVersion}")
  implementation "com.google.firebase:firebase-analytics"
  implementation "com.google.firebase:firebase-messaging"
  implementation "com.google.android.play:app-update:2.0.1"
  implementation "com.facebook.react:hermes-android"

  debugImplementation "com.facebook.flipper:flipper:${FLIPPER_VERSION}"
  debugImplementation "com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}"
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
